/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

const proto = {};
const COMPILED= true;
proto.scos_refurb = {};
proto.scos_refurb.v1 = {};
var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() { return this; })();

var google_protobuf_wrappers_pb = require('google-protobuf/google/protobuf/wrappers_pb.js');
goog.exportSymbol('proto.scos_refurb.v1.BoardInspectRequest', null, global);
goog.exportSymbol('proto.scos_refurb.v1.BoardInspectResponse', null, global);
goog.exportSymbol('proto.scos_refurb.v1.BoardInspectResponse.BoardInfo', null, global);
goog.exportSymbol('proto.scos_refurb.v1.BoardVersionsRequest', null, global);
goog.exportSymbol('proto.scos_refurb.v1.BoardVersionsResponse', null, global);
goog.exportSymbol('proto.scos_refurb.v1.DepotGetRequest', null, global);
goog.exportSymbol('proto.scos_refurb.v1.DepotGetResponse', null, global);
goog.exportSymbol('proto.scos_refurb.v1.DryRunEnableRequest', null, global);
goog.exportSymbol('proto.scos_refurb.v1.DryRunEnableResponse', null, global);
goog.exportSymbol('proto.scos_refurb.v1.FwUpdateRequest', null, global);
goog.exportSymbol('proto.scos_refurb.v1.FwUpdateResponse', null, global);
goog.exportSymbol('proto.scos_refurb.v1.PartBackupRequest', null, global);
goog.exportSymbol('proto.scos_refurb.v1.PartBackupResponse', null, global);
goog.exportSymbol('proto.scos_refurb.v1.PartDeleteRequest', null, global);
goog.exportSymbol('proto.scos_refurb.v1.PartDeleteResponse', null, global);
goog.exportSymbol('proto.scos_refurb.v1.PartMakeRequest', null, global);
goog.exportSymbol('proto.scos_refurb.v1.PartMakeResponse', null, global);
goog.exportSymbol('proto.scos_refurb.v1.PartUpdateRequest', null, global);
goog.exportSymbol('proto.scos_refurb.v1.PartUpdateResponse', null, global);
goog.exportSymbol('proto.scos_refurb.v1.PermanentParam', null, global);
goog.exportSymbol('proto.scos_refurb.v1.PpGetRequest', null, global);
goog.exportSymbol('proto.scos_refurb.v1.PpGetResponse', null, global);
goog.exportSymbol('proto.scos_refurb.v1.PpIfRequest', null, global);
goog.exportSymbol('proto.scos_refurb.v1.PpIfResponse', null, global);
goog.exportSymbol('proto.scos_refurb.v1.PpListRequest', null, global);
goog.exportSymbol('proto.scos_refurb.v1.PpListResponse', null, global);
goog.exportSymbol('proto.scos_refurb.v1.PpSetRequest', null, global);
goog.exportSymbol('proto.scos_refurb.v1.PpSetResponse', null, global);
goog.exportSymbol('proto.scos_refurb.v1.PpSwapRequest', null, global);
goog.exportSymbol('proto.scos_refurb.v1.PpSwapResponse', null, global);
goog.exportSymbol('proto.scos_refurb.v1.PpSwapResponse.PermanentParamTuple', null, global);
goog.exportSymbol('proto.scos_refurb.v1.PpUpdateRequest', null, global);
goog.exportSymbol('proto.scos_refurb.v1.PpUpdateResponse', null, global);
goog.exportSymbol('proto.scos_refurb.v1.SboxApplyRequest', null, global);
goog.exportSymbol('proto.scos_refurb.v1.SboxApplyResponse', null, global);
goog.exportSymbol('proto.scos_refurb.v1.SysExecRequest', null, global);
goog.exportSymbol('proto.scos_refurb.v1.SysExecResponse', null, global);
goog.exportSymbol('proto.scos_refurb.v1.SysRebootRequest', null, global);
goog.exportSymbol('proto.scos_refurb.v1.SysRebootResponse', null, global);
goog.exportSymbol('proto.scos_refurb.v1.WifiNvramUpdateRequest', null, global);
goog.exportSymbol('proto.scos_refurb.v1.WifiNvramUpdateResponse', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.scos_refurb.v1.BoardInspectRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.scos_refurb.v1.BoardInspectRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.scos_refurb.v1.BoardInspectRequest.displayName = 'proto.scos_refurb.v1.BoardInspectRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.scos_refurb.v1.BoardInspectRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.scos_refurb.v1.BoardInspectRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.scos_refurb.v1.BoardInspectRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.scos_refurb.v1.BoardInspectRequest.toObject = function(includeInstance, msg) {
  var  obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.scos_refurb.v1.BoardInspectRequest}
 */
proto.scos_refurb.v1.BoardInspectRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.scos_refurb.v1.BoardInspectRequest();
  return proto.scos_refurb.v1.BoardInspectRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.scos_refurb.v1.BoardInspectRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.scos_refurb.v1.BoardInspectRequest}
 */
proto.scos_refurb.v1.BoardInspectRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.scos_refurb.v1.BoardInspectRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.scos_refurb.v1.BoardInspectRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.scos_refurb.v1.BoardInspectRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.scos_refurb.v1.BoardInspectRequest.serializeBinaryToWriter = function(message, writer) {
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.scos_refurb.v1.BoardInspectResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.scos_refurb.v1.BoardInspectResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.scos_refurb.v1.BoardInspectResponse.displayName = 'proto.scos_refurb.v1.BoardInspectResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.scos_refurb.v1.BoardInspectResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.scos_refurb.v1.BoardInspectResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.scos_refurb.v1.BoardInspectResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.scos_refurb.v1.BoardInspectResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    info: (f = msg.getInfo()) && proto.scos_refurb.v1.BoardInspectResponse.BoardInfo.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.scos_refurb.v1.BoardInspectResponse}
 */
proto.scos_refurb.v1.BoardInspectResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.scos_refurb.v1.BoardInspectResponse();
  return proto.scos_refurb.v1.BoardInspectResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.scos_refurb.v1.BoardInspectResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.scos_refurb.v1.BoardInspectResponse}
 */
proto.scos_refurb.v1.BoardInspectResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.scos_refurb.v1.BoardInspectResponse.BoardInfo();
      reader.readMessage(value,proto.scos_refurb.v1.BoardInspectResponse.BoardInfo.deserializeBinaryFromReader);
      msg.setInfo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.scos_refurb.v1.BoardInspectResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.scos_refurb.v1.BoardInspectResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.scos_refurb.v1.BoardInspectResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.scos_refurb.v1.BoardInspectResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInfo();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.scos_refurb.v1.BoardInspectResponse.BoardInfo.serializeBinaryToWriter
    );
  }
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.scos_refurb.v1.BoardInspectResponse.BoardInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.scos_refurb.v1.BoardInspectResponse.BoardInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.scos_refurb.v1.BoardInspectResponse.BoardInfo.displayName = 'proto.scos_refurb.v1.BoardInspectResponse.BoardInfo';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.scos_refurb.v1.BoardInspectResponse.BoardInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.scos_refurb.v1.BoardInspectResponse.BoardInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.scos_refurb.v1.BoardInspectResponse.BoardInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.scos_refurb.v1.BoardInspectResponse.BoardInfo.toObject = function(includeInstance, msg) {
  var f, obj = {};

  if ((f = msg.getVersionsMap())) {
    obj.versionsMap = f.toObject(includeInstance, undefined);
  } else {
    obj.versionsMap = [];
  }

  if ((f = msg.getParametersMap())) {
    obj.parametersMap = f.toObject(includeInstance, undefined);
  } else {
    obj.parametersMap = [];
  }

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }

  return obj;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.scos_refurb.v1.BoardInspectResponse.BoardInfo}
 */
proto.scos_refurb.v1.BoardInspectResponse.BoardInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.scos_refurb.v1.BoardInspectResponse.BoardInfo();
  return proto.scos_refurb.v1.BoardInspectResponse.BoardInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.scos_refurb.v1.BoardInspectResponse.BoardInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.scos_refurb.v1.BoardInspectResponse.BoardInfo}
 */
proto.scos_refurb.v1.BoardInspectResponse.BoardInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    var value;
    switch (field) {
    case 1:
      value = msg.getVersionsMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString, null, "");
         });
      break;
    case 2:
      value = msg.getParametersMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString, null, "");
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.scos_refurb.v1.BoardInspectResponse.BoardInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.scos_refurb.v1.BoardInspectResponse.BoardInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.scos_refurb.v1.BoardInspectResponse.BoardInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.scos_refurb.v1.BoardInspectResponse.BoardInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getVersionsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(1, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
  f = message.getParametersMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(2, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
};


/**
 * map<string, string> versions = 1;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.scos_refurb.v1.BoardInspectResponse.BoardInfo.prototype.getVersionsMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 1, opt_noLazyCreate,
      null));
};


proto.scos_refurb.v1.BoardInspectResponse.BoardInfo.prototype.clearVersionsMap = function() {
  this.getVersionsMap().clear();
};


/**
 * map<string, string> parameters = 2;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.scos_refurb.v1.BoardInspectResponse.BoardInfo.prototype.getParametersMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 2, opt_noLazyCreate,
      null));
};


proto.scos_refurb.v1.BoardInspectResponse.BoardInfo.prototype.clearParametersMap = function() {
  this.getParametersMap().clear();
};


/**
 * optional BoardInfo info = 1;
 * @return {?proto.scos_refurb.v1.BoardInspectResponse.BoardInfo}
 */
proto.scos_refurb.v1.BoardInspectResponse.prototype.getInfo = function() {
  return /** @type{?proto.scos_refurb.v1.BoardInspectResponse.BoardInfo} */ (
    jspb.Message.getWrapperField(this, proto.scos_refurb.v1.BoardInspectResponse.BoardInfo, 1));
};


/** @param {?proto.scos_refurb.v1.BoardInspectResponse.BoardInfo|undefined} value */
proto.scos_refurb.v1.BoardInspectResponse.prototype.setInfo = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.scos_refurb.v1.BoardInspectResponse.prototype.clearInfo = function() {
  this.setInfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.scos_refurb.v1.BoardInspectResponse.prototype.hasInfo = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.scos_refurb.v1.BoardVersionsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.scos_refurb.v1.BoardVersionsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.scos_refurb.v1.BoardVersionsRequest.displayName = 'proto.scos_refurb.v1.BoardVersionsRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.scos_refurb.v1.BoardVersionsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.scos_refurb.v1.BoardVersionsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.scos_refurb.v1.BoardVersionsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.scos_refurb.v1.BoardVersionsRequest.toObject = function(includeInstance, msg) {
  var obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.scos_refurb.v1.BoardVersionsRequest}
 */
proto.scos_refurb.v1.BoardVersionsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.scos_refurb.v1.BoardVersionsRequest();
  return proto.scos_refurb.v1.BoardVersionsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.scos_refurb.v1.BoardVersionsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.scos_refurb.v1.BoardVersionsRequest}
 */
proto.scos_refurb.v1.BoardVersionsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.scos_refurb.v1.BoardVersionsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.scos_refurb.v1.BoardVersionsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.scos_refurb.v1.BoardVersionsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.scos_refurb.v1.BoardVersionsRequest.serializeBinaryToWriter = function(message, writer) {
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.scos_refurb.v1.BoardVersionsResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.scos_refurb.v1.BoardVersionsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.scos_refurb.v1.BoardVersionsResponse.displayName = 'proto.scos_refurb.v1.BoardVersionsResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.scos_refurb.v1.BoardVersionsResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.scos_refurb.v1.BoardVersionsResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.scos_refurb.v1.BoardVersionsResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.scos_refurb.v1.BoardVersionsResponse.toObject = function(includeInstance, msg) {
  var obj = {};
  var f = msg.getVersionsMap();

  obj.versionsMap = (f) ? f.toObject(includeInstance, undefined) : [];

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }

  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.scos_refurb.v1.BoardVersionsResponse}
 */
proto.scos_refurb.v1.BoardVersionsResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.scos_refurb.v1.BoardVersionsResponse();
  return proto.scos_refurb.v1.BoardVersionsResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.scos_refurb.v1.BoardVersionsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.scos_refurb.v1.BoardVersionsResponse}
 */
proto.scos_refurb.v1.BoardVersionsResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = msg.getVersionsMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString, null, "");
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.scos_refurb.v1.BoardVersionsResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.scos_refurb.v1.BoardVersionsResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.scos_refurb.v1.BoardVersionsResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.scos_refurb.v1.BoardVersionsResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getVersionsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(1, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
};


/**
 * map<string, string> versions = 1;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.scos_refurb.v1.BoardVersionsResponse.prototype.getVersionsMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 1, opt_noLazyCreate,
      null));
};


proto.scos_refurb.v1.BoardVersionsResponse.prototype.clearVersionsMap = function() {
  this.getVersionsMap().clear();
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.scos_refurb.v1.DepotGetRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.scos_refurb.v1.DepotGetRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.scos_refurb.v1.DepotGetRequest.displayName = 'proto.scos_refurb.v1.DepotGetRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.scos_refurb.v1.DepotGetRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.scos_refurb.v1.DepotGetRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.scos_refurb.v1.DepotGetRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.scos_refurb.v1.DepotGetRequest.toObject = function(includeInstance, msg) {
  var obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.scos_refurb.v1.DepotGetRequest}
 */
proto.scos_refurb.v1.DepotGetRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.scos_refurb.v1.DepotGetRequest();
  return proto.scos_refurb.v1.DepotGetRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.scos_refurb.v1.DepotGetRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.scos_refurb.v1.DepotGetRequest}
 */
proto.scos_refurb.v1.DepotGetRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.scos_refurb.v1.DepotGetRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.scos_refurb.v1.DepotGetRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.scos_refurb.v1.DepotGetRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.scos_refurb.v1.DepotGetRequest.serializeBinaryToWriter = function(message, writer) {
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.scos_refurb.v1.DepotGetResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.scos_refurb.v1.DepotGetResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.scos_refurb.v1.DepotGetResponse.displayName = 'proto.scos_refurb.v1.DepotGetResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.scos_refurb.v1.DepotGetResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.scos_refurb.v1.DepotGetResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.scos_refurb.v1.DepotGetResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.scos_refurb.v1.DepotGetResponse.toObject = function(includeInstance, msg) {
  var obj = {
    address: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.scos_refurb.v1.DepotGetResponse}
 */
proto.scos_refurb.v1.DepotGetResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.scos_refurb.v1.DepotGetResponse();
  return proto.scos_refurb.v1.DepotGetResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.scos_refurb.v1.DepotGetResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.scos_refurb.v1.DepotGetResponse}
 */
proto.scos_refurb.v1.DepotGetResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAddress(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.scos_refurb.v1.DepotGetResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.scos_refurb.v1.DepotGetResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.scos_refurb.v1.DepotGetResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.scos_refurb.v1.DepotGetResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAddress();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string address = 1;
 * @return {string}
 */
proto.scos_refurb.v1.DepotGetResponse.prototype.getAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.scos_refurb.v1.DepotGetResponse.prototype.setAddress = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.scos_refurb.v1.DryRunEnableResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.scos_refurb.v1.DryRunEnableResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.scos_refurb.v1.DryRunEnableResponse.displayName = 'proto.scos_refurb.v1.DryRunEnableResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.scos_refurb.v1.DryRunEnableResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.scos_refurb.v1.DryRunEnableResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.scos_refurb.v1.DryRunEnableResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.scos_refurb.v1.DryRunEnableResponse.toObject = function(includeInstance, msg) {
  var obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.scos_refurb.v1.DryRunEnableResponse}
 */
proto.scos_refurb.v1.DryRunEnableResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.scos_refurb.v1.DryRunEnableResponse();
  return proto.scos_refurb.v1.DryRunEnableResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.scos_refurb.v1.DryRunEnableResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.scos_refurb.v1.DryRunEnableResponse}
 */
proto.scos_refurb.v1.DryRunEnableResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.scos_refurb.v1.DryRunEnableResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.scos_refurb.v1.DryRunEnableResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.scos_refurb.v1.DryRunEnableResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.scos_refurb.v1.DryRunEnableResponse.serializeBinaryToWriter = function(message, writer) {
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.scos_refurb.v1.FwUpdateRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.scos_refurb.v1.FwUpdateRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.scos_refurb.v1.FwUpdateRequest.displayName = 'proto.scos_refurb.v1.FwUpdateRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.scos_refurb.v1.FwUpdateRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.scos_refurb.v1.FwUpdateRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.scos_refurb.v1.FwUpdateRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.scos_refurb.v1.FwUpdateRequest.toObject = function(includeInstance, msg) {
  var obj = {
    component: jspb.Message.getFieldWithDefault(msg, 1, ""),
    url: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.scos_refurb.v1.FwUpdateRequest}
 */
proto.scos_refurb.v1.FwUpdateRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.scos_refurb.v1.FwUpdateRequest();
  return proto.scos_refurb.v1.FwUpdateRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.scos_refurb.v1.FwUpdateRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.scos_refurb.v1.FwUpdateRequest}
 */
proto.scos_refurb.v1.FwUpdateRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    var value;
    switch (field) {
    case 1:
      value = /** @type {string} */ (reader.readString());
      msg.setComponent(value);
      break;
    case 2:
      value = /** @type {string} */ (reader.readString());
      msg.setUrl(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.scos_refurb.v1.FwUpdateRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.scos_refurb.v1.FwUpdateRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.scos_refurb.v1.FwUpdateRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.scos_refurb.v1.FwUpdateRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getComponent();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getUrl();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string component = 1;
 * @return {string}
 */
proto.scos_refurb.v1.FwUpdateRequest.prototype.getComponent = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.scos_refurb.v1.FwUpdateRequest.prototype.setComponent = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string url = 2;
 * @return {string}
 */
proto.scos_refurb.v1.FwUpdateRequest.prototype.getUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.scos_refurb.v1.FwUpdateRequest.prototype.setUrl = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.scos_refurb.v1.FwUpdateResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.scos_refurb.v1.FwUpdateResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.scos_refurb.v1.FwUpdateResponse.displayName = 'proto.scos_refurb.v1.FwUpdateResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.scos_refurb.v1.FwUpdateResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.scos_refurb.v1.FwUpdateResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.scos_refurb.v1.FwUpdateResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.scos_refurb.v1.FwUpdateResponse.toObject = function(includeInstance, msg) {
  var obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.scos_refurb.v1.FwUpdateResponse}
 */
proto.scos_refurb.v1.FwUpdateResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.scos_refurb.v1.FwUpdateResponse();
  return proto.scos_refurb.v1.FwUpdateResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.scos_refurb.v1.FwUpdateResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.scos_refurb.v1.FwUpdateResponse}
 */
proto.scos_refurb.v1.FwUpdateResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.scos_refurb.v1.FwUpdateResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.scos_refurb.v1.FwUpdateResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.scos_refurb.v1.FwUpdateResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.scos_refurb.v1.FwUpdateResponse.serializeBinaryToWriter = function(message, writer) {
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.scos_refurb.v1.PartBackupRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.scos_refurb.v1.PartBackupRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.scos_refurb.v1.PartBackupRequest.displayName = 'proto.scos_refurb.v1.PartBackupRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.scos_refurb.v1.PartBackupRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.scos_refurb.v1.PartBackupRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.scos_refurb.v1.PartBackupRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.scos_refurb.v1.PartBackupRequest.toObject = function(includeInstance, msg) {
  var obj = {
    partition: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.scos_refurb.v1.PartBackupRequest}
 */
proto.scos_refurb.v1.PartBackupRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.scos_refurb.v1.PartBackupRequest();
  return proto.scos_refurb.v1.PartBackupRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.scos_refurb.v1.PartBackupRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.scos_refurb.v1.PartBackupRequest}
 */
proto.scos_refurb.v1.PartBackupRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPartition(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.scos_refurb.v1.PartBackupRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.scos_refurb.v1.PartBackupRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.scos_refurb.v1.PartBackupRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.scos_refurb.v1.PartBackupRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPartition();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string partition = 1;
 * @return {string}
 */
proto.scos_refurb.v1.PartBackupRequest.prototype.getPartition = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.scos_refurb.v1.PartBackupRequest.prototype.setPartition = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.scos_refurb.v1.PartBackupResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.scos_refurb.v1.PartBackupResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.scos_refurb.v1.PartBackupResponse.displayName = 'proto.scos_refurb.v1.PartBackupResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.scos_refurb.v1.PartBackupResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.scos_refurb.v1.PartBackupResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.scos_refurb.v1.PartBackupResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.scos_refurb.v1.PartBackupResponse.toObject = function(includeInstance, msg) {
  var obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.scos_refurb.v1.PartBackupResponse}
 */
proto.scos_refurb.v1.PartBackupResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.scos_refurb.v1.PartBackupResponse();
  return proto.scos_refurb.v1.PartBackupResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.scos_refurb.v1.PartBackupResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.scos_refurb.v1.PartBackupResponse}
 */
proto.scos_refurb.v1.PartBackupResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.scos_refurb.v1.PartBackupResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.scos_refurb.v1.PartBackupResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.scos_refurb.v1.PartBackupResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.scos_refurb.v1.PartBackupResponse.serializeBinaryToWriter = function(message, writer) {
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.scos_refurb.v1.PartDeleteRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.scos_refurb.v1.PartDeleteRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.scos_refurb.v1.PartDeleteRequest.displayName = 'proto.scos_refurb.v1.PartDeleteRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.scos_refurb.v1.PartDeleteRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.scos_refurb.v1.PartDeleteRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.scos_refurb.v1.PartDeleteRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.scos_refurb.v1.PartDeleteRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    partition: jspb.Message.getFieldWithDefault(msg, 1, ""),
    required: jspb.Message.getFieldWithDefault(msg, 2, false),
    device: (f = msg.getDevice()) && google_protobuf_wrappers_pb.StringValue.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.scos_refurb.v1.PartDeleteRequest}
 */
proto.scos_refurb.v1.PartDeleteRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.scos_refurb.v1.PartDeleteRequest();
  return proto.scos_refurb.v1.PartDeleteRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.scos_refurb.v1.PartDeleteRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.scos_refurb.v1.PartDeleteRequest}
 */
proto.scos_refurb.v1.PartDeleteRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    var value;
    switch (field) {
    case 1:
      value = /** @type {string} */ (reader.readString());
      msg.setPartition(value);
      break;
    case 2:
      value = /** @type {boolean} */ (reader.readBool());
      msg.setRequired(value);
      break;
    case 3:
      value = new google_protobuf_wrappers_pb.StringValue();
      reader.readMessage(value,google_protobuf_wrappers_pb.StringValue.deserializeBinaryFromReader);
      msg.setDevice(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.scos_refurb.v1.PartDeleteRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.scos_refurb.v1.PartDeleteRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.scos_refurb.v1.PartDeleteRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.scos_refurb.v1.PartDeleteRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPartition();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getRequired();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getDevice();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      google_protobuf_wrappers_pb.StringValue.serializeBinaryToWriter
    );
  }
};


/**
 * optional string partition = 1;
 * @return {string}
 */
proto.scos_refurb.v1.PartDeleteRequest.prototype.getPartition = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.scos_refurb.v1.PartDeleteRequest.prototype.setPartition = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional bool required = 2;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.scos_refurb.v1.PartDeleteRequest.prototype.getRequired = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 2, false));
};


/** @param {boolean} value */
proto.scos_refurb.v1.PartDeleteRequest.prototype.setRequired = function(value) {
  jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * optional google.protobuf.StringValue device = 3;
 * @return {?proto.google.protobuf.StringValue}
 */
proto.scos_refurb.v1.PartDeleteRequest.prototype.getDevice = function() {
  return /** @type{?proto.google.protobuf.StringValue} */ (
    jspb.Message.getWrapperField(this, google_protobuf_wrappers_pb.StringValue, 3));
};


/** @param {?proto.google.protobuf.StringValue|undefined} value */
proto.scos_refurb.v1.PartDeleteRequest.prototype.setDevice = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.scos_refurb.v1.PartDeleteRequest.prototype.clearDevice = function() {
  this.setDevice(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.scos_refurb.v1.PartDeleteRequest.prototype.hasDevice = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.scos_refurb.v1.PartDeleteResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.scos_refurb.v1.PartDeleteResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.scos_refurb.v1.PartDeleteResponse.displayName = 'proto.scos_refurb.v1.PartDeleteResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.scos_refurb.v1.PartDeleteResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.scos_refurb.v1.PartDeleteResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.scos_refurb.v1.PartDeleteResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.scos_refurb.v1.PartDeleteResponse.toObject = function(includeInstance, msg) {
  var obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.scos_refurb.v1.PartDeleteResponse}
 */
proto.scos_refurb.v1.PartDeleteResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.scos_refurb.v1.PartDeleteResponse();
  return proto.scos_refurb.v1.PartDeleteResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.scos_refurb.v1.PartDeleteResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.scos_refurb.v1.PartDeleteResponse}
 */
proto.scos_refurb.v1.PartDeleteResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.scos_refurb.v1.PartDeleteResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.scos_refurb.v1.PartDeleteResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.scos_refurb.v1.PartDeleteResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.scos_refurb.v1.PartDeleteResponse.serializeBinaryToWriter = function(message, writer) {
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.scos_refurb.v1.PartMakeRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.scos_refurb.v1.PartMakeRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.scos_refurb.v1.PartMakeRequest.displayName = 'proto.scos_refurb.v1.PartMakeRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.scos_refurb.v1.PartMakeRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.scos_refurb.v1.PartMakeRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.scos_refurb.v1.PartMakeRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.scos_refurb.v1.PartMakeRequest.toObject = function(includeInstance, msg) {
  var obj = {
    partition: jspb.Message.getFieldWithDefault(msg, 1, ""),
    device: jspb.Message.getFieldWithDefault(msg, 2, ""),
    size: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.scos_refurb.v1.PartMakeRequest}
 */
proto.scos_refurb.v1.PartMakeRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.scos_refurb.v1.PartMakeRequest();
  return proto.scos_refurb.v1.PartMakeRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.scos_refurb.v1.PartMakeRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.scos_refurb.v1.PartMakeRequest}
 */
proto.scos_refurb.v1.PartMakeRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    var value;
    switch (field) {
    case 1:
      value = /** @type {string} */ (reader.readString());
      msg.setPartition(value);
      break;
    case 2:
      value = /** @type {string} */ (reader.readString());
      msg.setDevice(value);
      break;
    case 3:
      value = /** @type {string} */ (reader.readString());
      msg.setSize(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.scos_refurb.v1.PartMakeRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.scos_refurb.v1.PartMakeRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.scos_refurb.v1.PartMakeRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.scos_refurb.v1.PartMakeRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPartition();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getDevice();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getSize();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string partition = 1;
 * @return {string}
 */
proto.scos_refurb.v1.PartMakeRequest.prototype.getPartition = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.scos_refurb.v1.PartMakeRequest.prototype.setPartition = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string device = 2;
 * @return {string}
 */
proto.scos_refurb.v1.PartMakeRequest.prototype.getDevice = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.scos_refurb.v1.PartMakeRequest.prototype.setDevice = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string size = 3;
 * @return {string}
 */
proto.scos_refurb.v1.PartMakeRequest.prototype.getSize = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.scos_refurb.v1.PartMakeRequest.prototype.setSize = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.scos_refurb.v1.PartMakeResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.scos_refurb.v1.PartMakeResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.scos_refurb.v1.PartMakeResponse.displayName = 'proto.scos_refurb.v1.PartMakeResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.scos_refurb.v1.PartMakeResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.scos_refurb.v1.PartMakeResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.scos_refurb.v1.PartMakeResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.scos_refurb.v1.PartMakeResponse.toObject = function(includeInstance, msg) {
  var obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.scos_refurb.v1.PartMakeResponse}
 */
proto.scos_refurb.v1.PartMakeResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.scos_refurb.v1.PartMakeResponse();
  return proto.scos_refurb.v1.PartMakeResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.scos_refurb.v1.PartMakeResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.scos_refurb.v1.PartMakeResponse}
 */
proto.scos_refurb.v1.PartMakeResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.scos_refurb.v1.PartMakeResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.scos_refurb.v1.PartMakeResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.scos_refurb.v1.PartMakeResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.scos_refurb.v1.PartMakeResponse.serializeBinaryToWriter = function(message, writer) {
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.scos_refurb.v1.PartUpdateRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.scos_refurb.v1.PartUpdateRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.scos_refurb.v1.PartUpdateRequest.displayName = 'proto.scos_refurb.v1.PartUpdateRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.scos_refurb.v1.PartUpdateRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.scos_refurb.v1.PartUpdateRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.scos_refurb.v1.PartUpdateRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.scos_refurb.v1.PartUpdateRequest.toObject = function(includeInstance, msg) {
  var obj = {
    partition: jspb.Message.getFieldWithDefault(msg, 1, ""),
    file: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.scos_refurb.v1.PartUpdateRequest}
 */
proto.scos_refurb.v1.PartUpdateRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.scos_refurb.v1.PartUpdateRequest();
  return proto.scos_refurb.v1.PartUpdateRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.scos_refurb.v1.PartUpdateRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.scos_refurb.v1.PartUpdateRequest}
 */
proto.scos_refurb.v1.PartUpdateRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    var value;
    switch (field) {
    case 1:
      value = /** @type {string} */ (reader.readString());
      msg.setPartition(value);
      break;
    case 2:
      value = /** @type {string} */ (reader.readString());
      msg.setFile(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.scos_refurb.v1.PartUpdateRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.scos_refurb.v1.PartUpdateRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.scos_refurb.v1.PartUpdateRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.scos_refurb.v1.PartUpdateRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPartition();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getFile();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string partition = 1;
 * @return {string}
 */
proto.scos_refurb.v1.PartUpdateRequest.prototype.getPartition = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.scos_refurb.v1.PartUpdateRequest.prototype.setPartition = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string file = 2;
 * @return {string}
 */
proto.scos_refurb.v1.PartUpdateRequest.prototype.getFile = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.scos_refurb.v1.PartUpdateRequest.prototype.setFile = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.scos_refurb.v1.PartUpdateResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.scos_refurb.v1.PartUpdateResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.scos_refurb.v1.PartUpdateResponse.displayName = 'proto.scos_refurb.v1.PartUpdateResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.scos_refurb.v1.PartUpdateResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.scos_refurb.v1.PartUpdateResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.scos_refurb.v1.PartUpdateResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.scos_refurb.v1.PartUpdateResponse.toObject = function(includeInstance, msg) {
  var obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.scos_refurb.v1.PartUpdateResponse}
 */
proto.scos_refurb.v1.PartUpdateResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.scos_refurb.v1.PartUpdateResponse();
  return proto.scos_refurb.v1.PartUpdateResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.scos_refurb.v1.PartUpdateResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.scos_refurb.v1.PartUpdateResponse}
 */
proto.scos_refurb.v1.PartUpdateResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.scos_refurb.v1.PartUpdateResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.scos_refurb.v1.PartUpdateResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.scos_refurb.v1.PartUpdateResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.scos_refurb.v1.PartUpdateResponse.serializeBinaryToWriter = function(message, writer) {
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.scos_refurb.v1.PermanentParam = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.scos_refurb.v1.PermanentParam, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.scos_refurb.v1.PermanentParam.displayName = 'proto.scos_refurb.v1.PermanentParam';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.scos_refurb.v1.PermanentParam.prototype.toObject = function(opt_includeInstance) {
  return proto.scos_refurb.v1.PermanentParam.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.scos_refurb.v1.PermanentParam} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.scos_refurb.v1.PermanentParam.toObject = function(includeInstance, msg) {
  var obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    value: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.scos_refurb.v1.PermanentParam}
 */
proto.scos_refurb.v1.PermanentParam.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.scos_refurb.v1.PermanentParam();
  return proto.scos_refurb.v1.PermanentParam.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.scos_refurb.v1.PermanentParam} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.scos_refurb.v1.PermanentParam}
 */
proto.scos_refurb.v1.PermanentParam.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    var value;
    switch (field) {
    case 1:
      value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      value = /** @type {string} */ (reader.readString());
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.scos_refurb.v1.PermanentParam.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.scos_refurb.v1.PermanentParam.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.scos_refurb.v1.PermanentParam} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.scos_refurb.v1.PermanentParam.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getValue();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.scos_refurb.v1.PermanentParam.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.scos_refurb.v1.PermanentParam.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string value = 2;
 * @return {string}
 */
proto.scos_refurb.v1.PermanentParam.prototype.getValue = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.scos_refurb.v1.PermanentParam.prototype.setValue = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.scos_refurb.v1.PpGetRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.scos_refurb.v1.PpGetRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.scos_refurb.v1.PpGetRequest.displayName = 'proto.scos_refurb.v1.PpGetRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.scos_refurb.v1.PpGetRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.scos_refurb.v1.PpGetRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.scos_refurb.v1.PpGetRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.scos_refurb.v1.PpGetRequest.toObject = function(includeInstance, msg) {
  var obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.scos_refurb.v1.PpGetRequest}
 */
proto.scos_refurb.v1.PpGetRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.scos_refurb.v1.PpGetRequest();
  return proto.scos_refurb.v1.PpGetRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.scos_refurb.v1.PpGetRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.scos_refurb.v1.PpGetRequest}
 */
proto.scos_refurb.v1.PpGetRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.scos_refurb.v1.PpGetRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.scos_refurb.v1.PpGetRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.scos_refurb.v1.PpGetRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.scos_refurb.v1.PpGetRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.scos_refurb.v1.PpGetRequest.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.scos_refurb.v1.PpGetRequest.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.scos_refurb.v1.PpGetResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.scos_refurb.v1.PpGetResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.scos_refurb.v1.PpGetResponse.displayName = 'proto.scos_refurb.v1.PpGetResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.scos_refurb.v1.PpGetResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.scos_refurb.v1.PpGetResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.scos_refurb.v1.PpGetResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.scos_refurb.v1.PpGetResponse.toObject = function(includeInstance, msg) {
  var obj = {
    value: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.scos_refurb.v1.PpGetResponse}
 */
proto.scos_refurb.v1.PpGetResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.scos_refurb.v1.PpGetResponse();
  return proto.scos_refurb.v1.PpGetResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.scos_refurb.v1.PpGetResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.scos_refurb.v1.PpGetResponse}
 */
proto.scos_refurb.v1.PpGetResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.scos_refurb.v1.PpGetResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.scos_refurb.v1.PpGetResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.scos_refurb.v1.PpGetResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.scos_refurb.v1.PpGetResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getValue();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string value = 2;
 * @return {string}
 */
proto.scos_refurb.v1.PpGetResponse.prototype.getValue = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.scos_refurb.v1.PpGetResponse.prototype.setValue = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.scos_refurb.v1.PpIfRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.scos_refurb.v1.PpIfRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.scos_refurb.v1.PpIfRequest.displayName = 'proto.scos_refurb.v1.PpIfRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.scos_refurb.v1.PpIfRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.scos_refurb.v1.PpIfRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.scos_refurb.v1.PpIfRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.scos_refurb.v1.PpIfRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    testName: jspb.Message.getFieldWithDefault(msg, 1, ""),
    testOp: jspb.Message.getFieldWithDefault(msg, 2, ""),
    testValue: jspb.Message.getFieldWithDefault(msg, 3, ""),
    bodyName: jspb.Message.getFieldWithDefault(msg, 4, ""),
    bodyValue: jspb.Message.getFieldWithDefault(msg, 5, ""),
    altName: (f = msg.getAltName()) && google_protobuf_wrappers_pb.StringValue.toObject(includeInstance, f),
    altValue: (f = msg.getAltValue()) && google_protobuf_wrappers_pb.StringValue.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.scos_refurb.v1.PpIfRequest}
 */
proto.scos_refurb.v1.PpIfRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.scos_refurb.v1.PpIfRequest();
  return proto.scos_refurb.v1.PpIfRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.scos_refurb.v1.PpIfRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.scos_refurb.v1.PpIfRequest}
 */
proto.scos_refurb.v1.PpIfRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    var value;
    switch (field) {
    case 1:
      value = /** @type {string} */ (reader.readString());
      msg.setTestName(value);
      break;
    case 2:
      value = /** @type {string} */ (reader.readString());
      msg.setTestOp(value);
      break;
    case 3:
      value = /** @type {string} */ (reader.readString());
      msg.setTestValue(value);
      break;
    case 4:
      value = /** @type {string} */ (reader.readString());
      msg.setBodyName(value);
      break;
    case 5:
      value = /** @type {string} */ (reader.readString());
      msg.setBodyValue(value);
      break;
    case 6:
      value = new google_protobuf_wrappers_pb.StringValue();
      reader.readMessage(value,google_protobuf_wrappers_pb.StringValue.deserializeBinaryFromReader);
      msg.setAltName(value);
      break;
    case 7:
      value = new google_protobuf_wrappers_pb.StringValue();
      reader.readMessage(value,google_protobuf_wrappers_pb.StringValue.deserializeBinaryFromReader);
      msg.setAltValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.scos_refurb.v1.PpIfRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.scos_refurb.v1.PpIfRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.scos_refurb.v1.PpIfRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.scos_refurb.v1.PpIfRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTestName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTestOp();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getTestValue();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getBodyName();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getBodyValue();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getAltName();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      google_protobuf_wrappers_pb.StringValue.serializeBinaryToWriter
    );
  }
  f = message.getAltValue();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      google_protobuf_wrappers_pb.StringValue.serializeBinaryToWriter
    );
  }
};


/**
 * optional string test_name = 1;
 * @return {string}
 */
proto.scos_refurb.v1.PpIfRequest.prototype.getTestName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.scos_refurb.v1.PpIfRequest.prototype.setTestName = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string test_op = 2;
 * @return {string}
 */
proto.scos_refurb.v1.PpIfRequest.prototype.getTestOp = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.scos_refurb.v1.PpIfRequest.prototype.setTestOp = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string test_value = 3;
 * @return {string}
 */
proto.scos_refurb.v1.PpIfRequest.prototype.getTestValue = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.scos_refurb.v1.PpIfRequest.prototype.setTestValue = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string body_name = 4;
 * @return {string}
 */
proto.scos_refurb.v1.PpIfRequest.prototype.getBodyName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.scos_refurb.v1.PpIfRequest.prototype.setBodyName = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string body_value = 5;
 * @return {string}
 */
proto.scos_refurb.v1.PpIfRequest.prototype.getBodyValue = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.scos_refurb.v1.PpIfRequest.prototype.setBodyValue = function(value) {
  jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional google.protobuf.StringValue alt_name = 6;
 * @return {?proto.google.protobuf.StringValue}
 */
proto.scos_refurb.v1.PpIfRequest.prototype.getAltName = function() {
  return /** @type{?proto.google.protobuf.StringValue} */ (
    jspb.Message.getWrapperField(this, google_protobuf_wrappers_pb.StringValue, 6));
};


/** @param {?proto.google.protobuf.StringValue|undefined} value */
proto.scos_refurb.v1.PpIfRequest.prototype.setAltName = function(value) {
  jspb.Message.setWrapperField(this, 6, value);
};


proto.scos_refurb.v1.PpIfRequest.prototype.clearAltName = function() {
  this.setAltName(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.scos_refurb.v1.PpIfRequest.prototype.hasAltName = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional google.protobuf.StringValue alt_value = 7;
 * @return {?proto.google.protobuf.StringValue}
 */
proto.scos_refurb.v1.PpIfRequest.prototype.getAltValue = function() {
  return /** @type{?proto.google.protobuf.StringValue} */ (
    jspb.Message.getWrapperField(this, google_protobuf_wrappers_pb.StringValue, 7));
};


/** @param {?proto.google.protobuf.StringValue|undefined} value */
proto.scos_refurb.v1.PpIfRequest.prototype.setAltValue = function(value) {
  jspb.Message.setWrapperField(this, 7, value);
};


proto.scos_refurb.v1.PpIfRequest.prototype.clearAltValue = function() {
  this.setAltValue(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.scos_refurb.v1.PpIfRequest.prototype.hasAltValue = function() {
  return jspb.Message.getField(this, 7) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.scos_refurb.v1.PpIfResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.scos_refurb.v1.PpIfResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.scos_refurb.v1.PpIfResponse.displayName = 'proto.scos_refurb.v1.PpIfResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.scos_refurb.v1.PpIfResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.scos_refurb.v1.PpIfResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.scos_refurb.v1.PpIfResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.scos_refurb.v1.PpIfResponse.toObject = function(includeInstance, msg) {
  var obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.scos_refurb.v1.PpIfResponse}
 */
proto.scos_refurb.v1.PpIfResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.scos_refurb.v1.PpIfResponse();
  return proto.scos_refurb.v1.PpIfResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.scos_refurb.v1.PpIfResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.scos_refurb.v1.PpIfResponse}
 */
proto.scos_refurb.v1.PpIfResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.scos_refurb.v1.PpIfResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.scos_refurb.v1.PpIfResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.scos_refurb.v1.PpIfResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.scos_refurb.v1.PpIfResponse.serializeBinaryToWriter = function(message, writer) {
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.scos_refurb.v1.PpListRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.scos_refurb.v1.PpListRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.scos_refurb.v1.PpListRequest.displayName = 'proto.scos_refurb.v1.PpListRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.scos_refurb.v1.PpListRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.scos_refurb.v1.PpListRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.scos_refurb.v1.PpListRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.scos_refurb.v1.PpListRequest.toObject = function(includeInstance, msg) {
  var obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.scos_refurb.v1.PpListRequest}
 */
proto.scos_refurb.v1.PpListRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.scos_refurb.v1.PpListRequest();
  return proto.scos_refurb.v1.PpListRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.scos_refurb.v1.PpListRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.scos_refurb.v1.PpListRequest}
 */
proto.scos_refurb.v1.PpListRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.scos_refurb.v1.PpListRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.scos_refurb.v1.PpListRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.scos_refurb.v1.PpListRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.scos_refurb.v1.PpListRequest.serializeBinaryToWriter = function(message, writer) {
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.scos_refurb.v1.PpListResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.scos_refurb.v1.PpListResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.scos_refurb.v1.PpListResponse.displayName = 'proto.scos_refurb.v1.PpListResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.scos_refurb.v1.PpListResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.scos_refurb.v1.PpListResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.scos_refurb.v1.PpListResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.scos_refurb.v1.PpListResponse.toObject = function(includeInstance, msg) {
  var obj = {};
  var f = msg.getParametersMap();

  obj.parametersMap = (f) ? f.toObject(includeInstance, undefined) : [];

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }

  return obj;
};

}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.scos_refurb.v1.PpListResponse}
 */
proto.scos_refurb.v1.PpListResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.scos_refurb.v1.PpListResponse();
  return proto.scos_refurb.v1.PpListResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.scos_refurb.v1.PpListResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.scos_refurb.v1.PpListResponse}
 */
proto.scos_refurb.v1.PpListResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = msg.getParametersMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString, null, "");
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.scos_refurb.v1.PpListResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.scos_refurb.v1.PpListResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.scos_refurb.v1.PpListResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.scos_refurb.v1.PpListResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getParametersMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(1, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
};


/**
 * map<string, string> parameters = 1;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.scos_refurb.v1.PpListResponse.prototype.getParametersMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 1, opt_noLazyCreate,
      null));
};


proto.scos_refurb.v1.PpListResponse.prototype.clearParametersMap = function() {
  this.getParametersMap().clear();
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.scos_refurb.v1.PpSetRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.scos_refurb.v1.PpSetRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.scos_refurb.v1.PpSetRequest.displayName = 'proto.scos_refurb.v1.PpSetRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.scos_refurb.v1.PpSetRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.scos_refurb.v1.PpSetRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.scos_refurb.v1.PpSetRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.scos_refurb.v1.PpSetRequest.toObject = function(includeInstance, msg) {
  var obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    value: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.scos_refurb.v1.PpSetRequest}
 */
proto.scos_refurb.v1.PpSetRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.scos_refurb.v1.PpSetRequest();
  return proto.scos_refurb.v1.PpSetRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.scos_refurb.v1.PpSetRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.scos_refurb.v1.PpSetRequest}
 */
proto.scos_refurb.v1.PpSetRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    var value;
    switch (field) {
    case 1:
      value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      value = /** @type {string} */ (reader.readString());
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.scos_refurb.v1.PpSetRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.scos_refurb.v1.PpSetRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.scos_refurb.v1.PpSetRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.scos_refurb.v1.PpSetRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getValue();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.scos_refurb.v1.PpSetRequest.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.scos_refurb.v1.PpSetRequest.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string value = 2;
 * @return {string}
 */
proto.scos_refurb.v1.PpSetRequest.prototype.getValue = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.scos_refurb.v1.PpSetRequest.prototype.setValue = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.scos_refurb.v1.PpSetResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.scos_refurb.v1.PpSetResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.scos_refurb.v1.PpSetResponse.displayName = 'proto.scos_refurb.v1.PpSetResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.scos_refurb.v1.PpSetResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.scos_refurb.v1.PpSetResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.scos_refurb.v1.PpSetResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.scos_refurb.v1.PpSetResponse.toObject = function(includeInstance, msg) {
  var obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.scos_refurb.v1.PpSetResponse}
 */
proto.scos_refurb.v1.PpSetResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.scos_refurb.v1.PpSetResponse();
  return proto.scos_refurb.v1.PpSetResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.scos_refurb.v1.PpSetResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.scos_refurb.v1.PpSetResponse}
 */
proto.scos_refurb.v1.PpSetResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.scos_refurb.v1.PpSetResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.scos_refurb.v1.PpSetResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.scos_refurb.v1.PpSetResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.scos_refurb.v1.PpSetResponse.serializeBinaryToWriter = function(message, writer) {
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.scos_refurb.v1.PpSwapRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.scos_refurb.v1.PpSwapRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.scos_refurb.v1.PpSwapRequest.displayName = 'proto.scos_refurb.v1.PpSwapRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.scos_refurb.v1.PpSwapRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.scos_refurb.v1.PpSwapRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.scos_refurb.v1.PpSwapRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.scos_refurb.v1.PpSwapRequest.toObject = function(includeInstance, msg) {
  var obj = {
    a: jspb.Message.getFieldWithDefault(msg, 1, ""),
    b: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.scos_refurb.v1.PpSwapRequest}
 */
proto.scos_refurb.v1.PpSwapRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.scos_refurb.v1.PpSwapRequest();
  return proto.scos_refurb.v1.PpSwapRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.scos_refurb.v1.PpSwapRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.scos_refurb.v1.PpSwapRequest}
 */
proto.scos_refurb.v1.PpSwapRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    var value;
    switch (field) {
    case 1:
      value = /** @type {string} */ (reader.readString());
      msg.setA(value);
      break;
    case 2:
      value = /** @type {string} */ (reader.readString());
      msg.setB(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.scos_refurb.v1.PpSwapRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.scos_refurb.v1.PpSwapRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.scos_refurb.v1.PpSwapRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.scos_refurb.v1.PpSwapRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getA();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getB();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string a = 1;
 * @return {string}
 */
proto.scos_refurb.v1.PpSwapRequest.prototype.getA = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.scos_refurb.v1.PpSwapRequest.prototype.setA = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string b = 2;
 * @return {string}
 */
proto.scos_refurb.v1.PpSwapRequest.prototype.getB = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.scos_refurb.v1.PpSwapRequest.prototype.setB = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.scos_refurb.v1.PpSwapResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.scos_refurb.v1.PpSwapResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.scos_refurb.v1.PpSwapResponse.displayName = 'proto.scos_refurb.v1.PpSwapResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.scos_refurb.v1.PpSwapResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.scos_refurb.v1.PpSwapResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.scos_refurb.v1.PpSwapResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.scos_refurb.v1.PpSwapResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    before: (f = msg.getBefore()) && proto.scos_refurb.v1.PpSwapResponse.PermanentParamTuple.toObject(includeInstance, f),
    after: (f = msg.getAfter()) && proto.scos_refurb.v1.PpSwapResponse.PermanentParamTuple.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.scos_refurb.v1.PpSwapResponse}
 */
proto.scos_refurb.v1.PpSwapResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.scos_refurb.v1.PpSwapResponse();
  return proto.scos_refurb.v1.PpSwapResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.scos_refurb.v1.PpSwapResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.scos_refurb.v1.PpSwapResponse}
 */
proto.scos_refurb.v1.PpSwapResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    var value;
    switch (field) {
    case 1:
      value = new proto.scos_refurb.v1.PpSwapResponse.PermanentParamTuple();
      reader.readMessage(value,proto.scos_refurb.v1.PpSwapResponse.PermanentParamTuple.deserializeBinaryFromReader);
      msg.setBefore(value);
      break;
    case 2:
      value = new proto.scos_refurb.v1.PpSwapResponse.PermanentParamTuple();
      reader.readMessage(value,proto.scos_refurb.v1.PpSwapResponse.PermanentParamTuple.deserializeBinaryFromReader);
      msg.setAfter(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.scos_refurb.v1.PpSwapResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.scos_refurb.v1.PpSwapResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.scos_refurb.v1.PpSwapResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.scos_refurb.v1.PpSwapResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBefore();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.scos_refurb.v1.PpSwapResponse.PermanentParamTuple.serializeBinaryToWriter
    );
  }
  f = message.getAfter();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.scos_refurb.v1.PpSwapResponse.PermanentParamTuple.serializeBinaryToWriter
    );
  }
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.scos_refurb.v1.PpSwapResponse.PermanentParamTuple = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.scos_refurb.v1.PpSwapResponse.PermanentParamTuple, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.scos_refurb.v1.PpSwapResponse.PermanentParamTuple.displayName = 'proto.scos_refurb.v1.PpSwapResponse.PermanentParamTuple';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.scos_refurb.v1.PpSwapResponse.PermanentParamTuple.prototype.toObject = function(opt_includeInstance) {
  return proto.scos_refurb.v1.PpSwapResponse.PermanentParamTuple.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.scos_refurb.v1.PpSwapResponse.PermanentParamTuple} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.scos_refurb.v1.PpSwapResponse.PermanentParamTuple.toObject = function(includeInstance, msg) {
  var f, obj = {
    first: (f = msg.getFirst()) && proto.scos_refurb.v1.PermanentParam.toObject(includeInstance, f),
    second: (f = msg.getSecond()) && proto.scos_refurb.v1.PermanentParam.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.scos_refurb.v1.PpSwapResponse.PermanentParamTuple}
 */
proto.scos_refurb.v1.PpSwapResponse.PermanentParamTuple.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.scos_refurb.v1.PpSwapResponse.PermanentParamTuple();
  return proto.scos_refurb.v1.PpSwapResponse.PermanentParamTuple.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.scos_refurb.v1.PpSwapResponse.PermanentParamTuple} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.scos_refurb.v1.PpSwapResponse.PermanentParamTuple}
 */
proto.scos_refurb.v1.PpSwapResponse.PermanentParamTuple.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    var value;
    switch (field) {
    case 1:
      value = new proto.scos_refurb.v1.PermanentParam();
      reader.readMessage(value,proto.scos_refurb.v1.PermanentParam.deserializeBinaryFromReader);
      msg.setFirst(value);
      break;
    case 2:
      value = new proto.scos_refurb.v1.PermanentParam();
      reader.readMessage(value,proto.scos_refurb.v1.PermanentParam.deserializeBinaryFromReader);
      msg.setSecond(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.scos_refurb.v1.PpSwapResponse.PermanentParamTuple.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.scos_refurb.v1.PpSwapResponse.PermanentParamTuple.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.scos_refurb.v1.PpSwapResponse.PermanentParamTuple} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.scos_refurb.v1.PpSwapResponse.PermanentParamTuple.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFirst();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.scos_refurb.v1.PermanentParam.serializeBinaryToWriter
    );
  }
  f = message.getSecond();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.scos_refurb.v1.PermanentParam.serializeBinaryToWriter
    );
  }
};


/**
 * optional PermanentParam first = 1;
 * @return {?proto.scos_refurb.v1.PermanentParam}
 */
proto.scos_refurb.v1.PpSwapResponse.PermanentParamTuple.prototype.getFirst = function() {
  return /** @type{?proto.scos_refurb.v1.PermanentParam} */ (
    jspb.Message.getWrapperField(this, proto.scos_refurb.v1.PermanentParam, 1));
};


/** @param {?proto.scos_refurb.v1.PermanentParam|undefined} value */
proto.scos_refurb.v1.PpSwapResponse.PermanentParamTuple.prototype.setFirst = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.scos_refurb.v1.PpSwapResponse.PermanentParamTuple.prototype.clearFirst = function() {
  this.setFirst(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.scos_refurb.v1.PpSwapResponse.PermanentParamTuple.prototype.hasFirst = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional PermanentParam second = 2;
 * @return {?proto.scos_refurb.v1.PermanentParam}
 */
proto.scos_refurb.v1.PpSwapResponse.PermanentParamTuple.prototype.getSecond = function() {
  return /** @type{?proto.scos_refurb.v1.PermanentParam} */ (
    jspb.Message.getWrapperField(this, proto.scos_refurb.v1.PermanentParam, 2));
};


/** @param {?proto.scos_refurb.v1.PermanentParam|undefined} value */
proto.scos_refurb.v1.PpSwapResponse.PermanentParamTuple.prototype.setSecond = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.scos_refurb.v1.PpSwapResponse.PermanentParamTuple.prototype.clearSecond = function() {
  this.setSecond(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.scos_refurb.v1.PpSwapResponse.PermanentParamTuple.prototype.hasSecond = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional PermanentParamTuple before = 1;
 * @return {?proto.scos_refurb.v1.PpSwapResponse.PermanentParamTuple}
 */
proto.scos_refurb.v1.PpSwapResponse.prototype.getBefore = function() {
  return /** @type{?proto.scos_refurb.v1.PpSwapResponse.PermanentParamTuple} */ (
    jspb.Message.getWrapperField(this, proto.scos_refurb.v1.PpSwapResponse.PermanentParamTuple, 1));
};


/** @param {?proto.scos_refurb.v1.PpSwapResponse.PermanentParamTuple|undefined} value */
proto.scos_refurb.v1.PpSwapResponse.prototype.setBefore = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.scos_refurb.v1.PpSwapResponse.prototype.clearBefore = function() {
  this.setBefore(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.scos_refurb.v1.PpSwapResponse.prototype.hasBefore = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional PermanentParamTuple after = 2;
 * @return {?proto.scos_refurb.v1.PpSwapResponse.PermanentParamTuple}
 */
proto.scos_refurb.v1.PpSwapResponse.prototype.getAfter = function() {
  return /** @type{?proto.scos_refurb.v1.PpSwapResponse.PermanentParamTuple} */ (
    jspb.Message.getWrapperField(this, proto.scos_refurb.v1.PpSwapResponse.PermanentParamTuple, 2));
};


/** @param {?proto.scos_refurb.v1.PpSwapResponse.PermanentParamTuple|undefined} value */
proto.scos_refurb.v1.PpSwapResponse.prototype.setAfter = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.scos_refurb.v1.PpSwapResponse.prototype.clearAfter = function() {
  this.setAfter(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.scos_refurb.v1.PpSwapResponse.prototype.hasAfter = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.scos_refurb.v1.PpUpdateRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.scos_refurb.v1.PpUpdateRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.scos_refurb.v1.PpUpdateRequest.displayName = 'proto.scos_refurb.v1.PpUpdateRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.scos_refurb.v1.PpUpdateRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.scos_refurb.v1.PpUpdateRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.scos_refurb.v1.PpUpdateRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.scos_refurb.v1.PpUpdateRequest.toObject = function(includeInstance, msg) {
  var obj = {
    file: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.scos_refurb.v1.PpUpdateRequest}
 */
proto.scos_refurb.v1.PpUpdateRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.scos_refurb.v1.PpUpdateRequest();
  return proto.scos_refurb.v1.PpUpdateRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.scos_refurb.v1.PpUpdateRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.scos_refurb.v1.PpUpdateRequest}
 */
proto.scos_refurb.v1.PpUpdateRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setFile(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.scos_refurb.v1.PpUpdateRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.scos_refurb.v1.PpUpdateRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.scos_refurb.v1.PpUpdateRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.scos_refurb.v1.PpUpdateRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFile();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string file = 1;
 * @return {string}
 */
proto.scos_refurb.v1.PpUpdateRequest.prototype.getFile = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.scos_refurb.v1.PpUpdateRequest.prototype.setFile = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.scos_refurb.v1.PpUpdateResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.scos_refurb.v1.PpUpdateResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.scos_refurb.v1.PpUpdateResponse.displayName = 'proto.scos_refurb.v1.PpUpdateResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.scos_refurb.v1.PpUpdateResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.scos_refurb.v1.PpUpdateResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.scos_refurb.v1.PpUpdateResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.scos_refurb.v1.PpUpdateResponse.toObject = function(includeInstance, msg) {
  var obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.scos_refurb.v1.PpUpdateResponse}
 */
proto.scos_refurb.v1.PpUpdateResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.scos_refurb.v1.PpUpdateResponse();
  return proto.scos_refurb.v1.PpUpdateResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.scos_refurb.v1.PpUpdateResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.scos_refurb.v1.PpUpdateResponse}
 */
proto.scos_refurb.v1.PpUpdateResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.scos_refurb.v1.PpUpdateResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.scos_refurb.v1.PpUpdateResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.scos_refurb.v1.PpUpdateResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.scos_refurb.v1.PpUpdateResponse.serializeBinaryToWriter = function(message, writer) {
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.scos_refurb.v1.SboxApplyRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.scos_refurb.v1.SboxApplyRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.scos_refurb.v1.SboxApplyRequest.displayName = 'proto.scos_refurb.v1.SboxApplyRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.scos_refurb.v1.SboxApplyRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.scos_refurb.v1.SboxApplyRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.scos_refurb.v1.SboxApplyRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.scos_refurb.v1.SboxApplyRequest.toObject = function(includeInstance, msg) {
  var obj = {
    url: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.scos_refurb.v1.SboxApplyRequest}
 */
proto.scos_refurb.v1.SboxApplyRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.scos_refurb.v1.SboxApplyRequest();
  return proto.scos_refurb.v1.SboxApplyRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.scos_refurb.v1.SboxApplyRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.scos_refurb.v1.SboxApplyRequest}
 */
proto.scos_refurb.v1.SboxApplyRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUrl(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.scos_refurb.v1.SboxApplyRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.scos_refurb.v1.SboxApplyRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.scos_refurb.v1.SboxApplyRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.scos_refurb.v1.SboxApplyRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUrl();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string url = 1;
 * @return {string}
 */
proto.scos_refurb.v1.SboxApplyRequest.prototype.getUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.scos_refurb.v1.SboxApplyRequest.prototype.setUrl = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.scos_refurb.v1.SboxApplyResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.scos_refurb.v1.SboxApplyResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.scos_refurb.v1.SboxApplyResponse.displayName = 'proto.scos_refurb.v1.SboxApplyResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.scos_refurb.v1.SboxApplyResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.scos_refurb.v1.SboxApplyResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.scos_refurb.v1.SboxApplyResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.scos_refurb.v1.SboxApplyResponse.toObject = function(includeInstance, msg) {
  var obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.scos_refurb.v1.SboxApplyResponse}
 */
proto.scos_refurb.v1.SboxApplyResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.scos_refurb.v1.SboxApplyResponse();
  return proto.scos_refurb.v1.SboxApplyResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.scos_refurb.v1.SboxApplyResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.scos_refurb.v1.SboxApplyResponse}
 */
proto.scos_refurb.v1.SboxApplyResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.scos_refurb.v1.SboxApplyResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.scos_refurb.v1.SboxApplyResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.scos_refurb.v1.SboxApplyResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.scos_refurb.v1.SboxApplyResponse.serializeBinaryToWriter = function(message, writer) {
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.scos_refurb.v1.SysExecRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.scos_refurb.v1.SysExecRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.scos_refurb.v1.SysExecRequest.displayName = 'proto.scos_refurb.v1.SysExecRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.scos_refurb.v1.SysExecRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.scos_refurb.v1.SysExecRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.scos_refurb.v1.SysExecRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.scos_refurb.v1.SysExecRequest.toObject = function(includeInstance, msg) {
  var obj = {
    command: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.scos_refurb.v1.SysExecRequest}
 */
proto.scos_refurb.v1.SysExecRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.scos_refurb.v1.SysExecRequest();
  return proto.scos_refurb.v1.SysExecRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.scos_refurb.v1.SysExecRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.scos_refurb.v1.SysExecRequest}
 */
proto.scos_refurb.v1.SysExecRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setCommand(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.scos_refurb.v1.SysExecRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.scos_refurb.v1.SysExecRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.scos_refurb.v1.SysExecRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.scos_refurb.v1.SysExecRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCommand();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string command = 1;
 * @return {string}
 */
proto.scos_refurb.v1.SysExecRequest.prototype.getCommand = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.scos_refurb.v1.SysExecRequest.prototype.setCommand = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.scos_refurb.v1.SysExecResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.scos_refurb.v1.SysExecResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.scos_refurb.v1.SysExecResponse.displayName = 'proto.scos_refurb.v1.SysExecResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.scos_refurb.v1.SysExecResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.scos_refurb.v1.SysExecResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.scos_refurb.v1.SysExecResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.scos_refurb.v1.SysExecResponse.toObject = function(includeInstance, msg) {
  var obj = {
    output: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.scos_refurb.v1.SysExecResponse}
 */
proto.scos_refurb.v1.SysExecResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.scos_refurb.v1.SysExecResponse();
  return proto.scos_refurb.v1.SysExecResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.scos_refurb.v1.SysExecResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.scos_refurb.v1.SysExecResponse}
 */
proto.scos_refurb.v1.SysExecResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setOutput(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.scos_refurb.v1.SysExecResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.scos_refurb.v1.SysExecResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.scos_refurb.v1.SysExecResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.scos_refurb.v1.SysExecResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOutput();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string output = 2;
 * @return {string}
 */
proto.scos_refurb.v1.SysExecResponse.prototype.getOutput = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.scos_refurb.v1.SysExecResponse.prototype.setOutput = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.scos_refurb.v1.SysRebootRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.scos_refurb.v1.SysRebootRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.scos_refurb.v1.SysRebootRequest.displayName = 'proto.scos_refurb.v1.SysRebootRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.scos_refurb.v1.SysRebootRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.scos_refurb.v1.SysRebootRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.scos_refurb.v1.SysRebootRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.scos_refurb.v1.SysRebootRequest.toObject = function(includeInstance, msg) {
  var obj = {
    delay: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.scos_refurb.v1.SysRebootRequest}
 */
proto.scos_refurb.v1.SysRebootRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.scos_refurb.v1.SysRebootRequest();
  return proto.scos_refurb.v1.SysRebootRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.scos_refurb.v1.SysRebootRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.scos_refurb.v1.SysRebootRequest}
 */
proto.scos_refurb.v1.SysRebootRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setDelay(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.scos_refurb.v1.SysRebootRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.scos_refurb.v1.SysRebootRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.scos_refurb.v1.SysRebootRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.scos_refurb.v1.SysRebootRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDelay();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
};


/**
 * optional uint64 delay = 1;
 * @return {number}
 */
proto.scos_refurb.v1.SysRebootRequest.prototype.getDelay = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.scos_refurb.v1.SysRebootRequest.prototype.setDelay = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.scos_refurb.v1.SysRebootResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.scos_refurb.v1.SysRebootResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.scos_refurb.v1.SysRebootResponse.displayName = 'proto.scos_refurb.v1.SysRebootResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.scos_refurb.v1.SysRebootResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.scos_refurb.v1.SysRebootResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.scos_refurb.v1.SysRebootResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.scos_refurb.v1.SysRebootResponse.toObject = function(includeInstance, msg) {
  var obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.scos_refurb.v1.SysRebootResponse}
 */
proto.scos_refurb.v1.SysRebootResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.scos_refurb.v1.SysRebootResponse();
  return proto.scos_refurb.v1.SysRebootResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.scos_refurb.v1.SysRebootResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.scos_refurb.v1.SysRebootResponse}
 */
proto.scos_refurb.v1.SysRebootResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.scos_refurb.v1.SysRebootResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.scos_refurb.v1.SysRebootResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.scos_refurb.v1.SysRebootResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.scos_refurb.v1.SysRebootResponse.serializeBinaryToWriter = function(message, writer) {
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.scos_refurb.v1.DryRunEnableRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.scos_refurb.v1.DryRunEnableRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.scos_refurb.v1.DryRunEnableRequest.displayName = 'proto.scos_refurb.v1.DryRunEnableRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.scos_refurb.v1.DryRunEnableRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.scos_refurb.v1.DryRunEnableRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.scos_refurb.v1.DryRunEnableRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.scos_refurb.v1.DryRunEnableRequest.toObject = function(includeInstance, msg) {
  var obj = {
    enabled: jspb.Message.getFieldWithDefault(msg, 1, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.scos_refurb.v1.DryRunEnableRequest}
 */
proto.scos_refurb.v1.DryRunEnableRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.scos_refurb.v1.DryRunEnableRequest();
  return proto.scos_refurb.v1.DryRunEnableRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.scos_refurb.v1.DryRunEnableRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.scos_refurb.v1.DryRunEnableRequest}
 */
proto.scos_refurb.v1.DryRunEnableRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setEnabled(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.scos_refurb.v1.DryRunEnableRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.scos_refurb.v1.DryRunEnableRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.scos_refurb.v1.DryRunEnableRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.scos_refurb.v1.DryRunEnableRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEnabled();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool enabled = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.scos_refurb.v1.DryRunEnableRequest.prototype.getEnabled = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.scos_refurb.v1.DryRunEnableRequest.prototype.setEnabled = function(value) {
  jspb.Message.setProto3BooleanField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.scos_refurb.v1.WifiNvramUpdateRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.scos_refurb.v1.WifiNvramUpdateRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.scos_refurb.v1.WifiNvramUpdateRequest.displayName = 'proto.scos_refurb.v1.WifiNvramUpdateRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.scos_refurb.v1.WifiNvramUpdateRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.scos_refurb.v1.WifiNvramUpdateRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.scos_refurb.v1.WifiNvramUpdateRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.scos_refurb.v1.WifiNvramUpdateRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    src: jspb.Message.getFieldWithDefault(msg, 1, ""),
    dst: (f = msg.getDst()) && google_protobuf_wrappers_pb.StringValue.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.scos_refurb.v1.WifiNvramUpdateRequest}
 */
proto.scos_refurb.v1.WifiNvramUpdateRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.scos_refurb.v1.WifiNvramUpdateRequest();
  return proto.scos_refurb.v1.WifiNvramUpdateRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.scos_refurb.v1.WifiNvramUpdateRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.scos_refurb.v1.WifiNvramUpdateRequest}
 */
proto.scos_refurb.v1.WifiNvramUpdateRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    var value;
    switch (field) {
    case 1:
      value = /** @type {string} */ (reader.readString());
      msg.setSrc(value);
      break;
    case 2:
      value = new google_protobuf_wrappers_pb.StringValue();
      reader.readMessage(value,google_protobuf_wrappers_pb.StringValue.deserializeBinaryFromReader);
      msg.setDst(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.scos_refurb.v1.WifiNvramUpdateRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.scos_refurb.v1.WifiNvramUpdateRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.scos_refurb.v1.WifiNvramUpdateRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.scos_refurb.v1.WifiNvramUpdateRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSrc();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getDst();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      google_protobuf_wrappers_pb.StringValue.serializeBinaryToWriter
    );
  }
};


/**
 * optional string src = 1;
 * @return {string}
 */
proto.scos_refurb.v1.WifiNvramUpdateRequest.prototype.getSrc = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.scos_refurb.v1.WifiNvramUpdateRequest.prototype.setSrc = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional google.protobuf.StringValue dst = 2;
 * @return {?proto.google.protobuf.StringValue}
 */
proto.scos_refurb.v1.WifiNvramUpdateRequest.prototype.getDst = function() {
  return /** @type{?proto.google.protobuf.StringValue} */ (
    jspb.Message.getWrapperField(this, google_protobuf_wrappers_pb.StringValue, 2));
};


/** @param {?proto.google.protobuf.StringValue|undefined} value */
proto.scos_refurb.v1.WifiNvramUpdateRequest.prototype.setDst = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.scos_refurb.v1.WifiNvramUpdateRequest.prototype.clearDst = function() {
  this.setDst(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.scos_refurb.v1.WifiNvramUpdateRequest.prototype.hasDst = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.scos_refurb.v1.WifiNvramUpdateResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.scos_refurb.v1.WifiNvramUpdateResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.scos_refurb.v1.WifiNvramUpdateResponse.displayName = 'proto.scos_refurb.v1.WifiNvramUpdateResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.scos_refurb.v1.WifiNvramUpdateResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.scos_refurb.v1.WifiNvramUpdateResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.scos_refurb.v1.WifiNvramUpdateResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.scos_refurb.v1.WifiNvramUpdateResponse.toObject = function(includeInstance, msg) {
  var obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.scos_refurb.v1.WifiNvramUpdateResponse}
 */
proto.scos_refurb.v1.WifiNvramUpdateResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.scos_refurb.v1.WifiNvramUpdateResponse();
  return proto.scos_refurb.v1.WifiNvramUpdateResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.scos_refurb.v1.WifiNvramUpdateResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.scos_refurb.v1.WifiNvramUpdateResponse}
 */
proto.scos_refurb.v1.WifiNvramUpdateResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.scos_refurb.v1.WifiNvramUpdateResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.scos_refurb.v1.WifiNvramUpdateResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.scos_refurb.v1.WifiNvramUpdateResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.scos_refurb.v1.WifiNvramUpdateResponse.serializeBinaryToWriter = function(message, writer) {
};


goog.object.extend(exports, proto.scos_refurb.v1);
